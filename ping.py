from telegram.ext import Application, CommandHandler, MessageHandler, filters
import tornado.web
import tornado.ioloop
import os
# üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:
# pip install python-telegram-bot requests python-dotenv
import re
import os
import requests
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from difflib import get_close_matches
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from main import get_surahs, get_surah_ayahs,get_ayah,handle_text_ayah_request,start,show_main_menu,menu,help_command,show_search_help,show_surah_page,show_surah_ayahs,show_ayah,show_full_surah_page,normalize,search,handle_button


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
timezone = pytz.timezone("Asia/Bishkek")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
scheduler = AsyncIOScheduler(timezone=timezone)

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN_TG")
API_BASE = "https://api.alquran.cloud/v1"
LANGUAGE_CODE = "ru.kuliev"
WEBHOOK_URL = 'https://tgbotquranaudio.onrender.com/'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π URL

SURA_OFFICIAL_NAMES = {
    1: "–ê–ª—å-–§–∞—Ç–∏—Ö–∞",
    2: "–ê–ª—å-–ë–∞–∫–∞—Ä–∞",
    3: "–ê–ª—å-–ò–º—Ä–∞–Ω",
    4: "–ê–Ω-–ù–∏—Å–∞",
    5: "–ê–ª—å-–ú–∞–∏–¥–∞",
    6: "–ê–ª—å-–ê–Ω'–∞–º",
    7: "–ê–ª—å-–ê'—Ä–∞—Ñ",
    8: "–ê–ª—å-–ê–Ω—Ñ–∞–ª—å",
    9: "–ê—Ç-–¢–∞—É–±–∞",
    10: "–Æ–Ω—É—Å",
    11: "–•—É–¥",
    12: "–Æ—Å—É—Ñ",
    13: "–ê—Ä-–†–∞'–¥",
    14: "–ò–±—Ä–∞—Ö–∏–º",
    15: "–ê–ª—å-–•–∏–¥–∂—Ä",
    16: "–ê–Ω-–ù–∞—Ö–ª—å",
    17: "–ê–ª—å-–ò—Å—Ä–∞",
    18: "–ê–ª—å-–ö–∞—Ö—Ñ",
    19: "–ú–∞—Ä–∏—è–º",
    20: "–¢–∞-–•–∞",
    21: "–ê–ª—å-–ê–Ω–±–∏—è",
    22: "–ê–ª—å-–•–∞–¥–∂",
    23: "–ê–ª—å-–ú—É'–º–∏–Ω—É–Ω",
    24: "–ê–Ω-–ù—É—Ä",
    25: "–ê–ª—å-–§—É—Ä–∫–∞–Ω",
    26: "–ê—à-–®—É–∞—Ä–∞",
    27: "–ê–Ω-–ù–∞–º–ª—å",
    28: "–ê–ª—å-–ö–∞—Å–∞—Å",
    29: "–ê–ª—å-–ê–Ω–∫–∞–±—É—Ç",
    30: "–ê—Ä-–†—É–º",
    31: "–õ—É–∫–º–∞–Ω",
    32: "–ê—Å-–°–∞–¥–∂–¥–∞",
    33: "–ê–ª—å-–ê—Ö–∑–∞–±",
    34: "–°–∞–±–∞",
    35: "–§–∞—Ç–∏—Ä",
    36: "–Ø—Å–∏–Ω",
    37: "–ê—Å-–°–∞—Ñ—Ñ–∞—Ç",
    38: "–°–∞–¥",
    39: "–ê–∑-–ó—É–º–∞—Ä",
    40: "–ì–∞—Ñ–∏—Ä",
    41: "–§—É—Å—Å–∏–ª–∞—Ç",
    42: "–ê—à-–®—É—Ä–∞",
    43: "–ê–∑-–ó—É—Ö—Ä—É—Ñ",
    44: "–ê–¥-–î—É—Ö–∞–Ω",
    45: "–ê–ª—å-–î–∂–∞—Å–∏—è",
    46: "–ê–ª—å-–ê—Ö–∫–∞—Ñ",
    47: "–ú—É—Ö–∞–º–º–∞–¥",
    48: "–ê–ª—å-–§–∞—Ç—Ö",
    49: "–ê–ª—å-–•—É–¥–∂—É—Ä–∞—Ç",
    50: "–ö–∞—Ñ",
    51: "–ê–∑-–ó–∞—Ä–∏—è—Ç",
    52: "–ê—Ç-–¢—É—Ä",
    53: "–ê–Ω-–ù–∞–¥–∂–º",
    54: "–ê–ª—å-–ö–∞–º–∞—Ä",
    55: "–ê—Ä-–†–∞—Ö–º–∞–Ω",
    56: "–ê–ª—å-–í–∞–∫–∏–∞",
    57: "–ê–ª—å-–•–∞–¥–∏–¥",
    58: "–ê–ª—å-–ú—É–¥–∂–∞–¥–∏–ª–∞",
    59: "–ê–ª—å-–•–∞—à—Ä",
    60: "–ê–ª—å-–ú—É–º—Ç–∞—Ö–∏–Ω–∞",
    61: "–ê—Å-–°–∞—Ñ—Ñ",
    62: "–ê–ª—å-–î–∂—É–º—É'–∞",
    63: "–ê–ª—å-–ú—É–Ω–∞—Ñ–∏–∫—É–Ω",
    64: "–ê—Ç-–¢–∞–≥–∞–±—É–Ω",
    65: "–ê—Ç-–¢–∞–ª–∞–∫",
    66: "–ê—Ç-–¢–∞—Ö—Ä–∏–º",
    67: "–ê–ª—å-–ú—É–ª—å–∫",
    68: "–ê–ª—å-–ö–∞–ª—è–º",
    69: "–ê–ª—å-–•–∞–∫–∫–∞",
    70: "–ê–ª—å-–ú–∞'–∞—Ä–∏–¥–∂",
    71: "–ù—É—Ö",
    72: "–ê–ª—å-–î–∂–∏–Ω–Ω",
    73: "–ê–ª—å-–ú—É–∑–∑–∞–º–º–∏–ª—å",
    74: "–ê–ª—å-–ú—É–¥–¥–∞—Å—Å–∏—Ä",
    75: "–ê–ª—å-–ö–∏–π–∞–º–∞",
    76: "–ê–ª—å-–ò–Ω—Å–∞–Ω",
    77: "–ê–ª—å-–ú—É—Ä—Å–∞–ª—è—Ç",
    78: "–ê–Ω-–ù–∞–±–∞",
    79: "–ê–Ω-–ù–∞–∑–∏–∞—Ç",
    80: "–ê–±–∞—Å–∞",
    81: "–ê—Ç-–¢–∞–∫–≤–∏—Ä",
    82: "–ê–ª—å-–ò–Ω—Ñ–∏—Ç–∞—Ä",
    83: "–ê–ª—å-–ú—É—Ç–∞—Ñ—Ñ–∏—Ñ–∏–Ω",
    84: "–ê–ª—å-–ò–Ω—à–∏–∫–∞–∫",
    85: "–ê–ª—å-–ë—É—Ä—É–¥–∂",
    86: "–ê—Ç-–¢–∞—Ä–∏–∫",
    87: "–ê–ª—å-–ê'–ª—è",
    88: "–ê–ª—å-–ì–∞—à–∏—è",
    89: "–ê–ª—å-–§–∞–¥–∂—Ä",
    90: "–ê–ª—å-–ë–∞–ª–∞–¥",
    91: "–ê—à-–®–∞–º—Å",
    92: "–ê–ª—å-–õ–∞–π–ª",
    93: "–ê–¥-–î—É—Ö–∞",
    94: "–ê—à-–®–∞—Ä—Ö",
    95: "–ê—Ç-–¢–∏–Ω",
    96: "–ê–ª—å-–ê–ª—è–∫",
    97: "–ê–ª—å-–ö–∞–¥—Ä",
    98: "–ê–ª—å-–ë–∞–π–π–∏–Ω–∞",
    99: "–ê–∑-–ó–∞–ª–∑–∞–ª–∞",
    100: "–ê–ª—å-–ê–¥–∏—è—Ç",
    101: "–ê–ª—å-–ö–∞—Ä–∏–∞",
    102: "–ê—Ç-–¢–∞–∫–∞—Å—É—Ä",
    103: "–ê–ª—å-–ê—Å—Ä",
    104: "–ê–ª—å-–•—É–º–∞–∑–∞",
    105: "–ê–ª—å-–§–∏–ª—å",
    106: "–ö—É—Ä–∞–π—à",
    107: "–ê–ª—å-–ú–∞'—É–Ω",
    108: "–ê–ª—å-–ö–∞—É—Å–∞—Ä",
    109: "–ê–ª—å-–ö–∞—Ñ–∏—Ä—É–Ω",
    110: "–ê–Ω-–ù–∞—Å—Ä",
    111: "–ê–ª—å-–ú–∞—Å–∞–¥",
    112: "–ê–ª—å-–ò—Ö–ª—è—Å",
    113: "–ê–ª—å-–§–∞–ª—è–∫",
    114: "–ê–Ω-–ù–∞—Å"
}
RUSSIAN_SURA_NAMES = {
    "—Ñ–∞—Ç–∏—Ö–∞": 1, "–∞–ª—Ñ–∞—Ç–∏—Ö–∞": 1, "–∞–ª—å—Ñ–∞—Ç–∏—Ö–∞": 1,
    "–±–∞–∫–∞—Ä–∞": 2, "–∞–ª—å–±–∞–∫–∞—Ä–∞": 2,
    "–∏–º—Ä–∞–Ω": 3, "–∞–ª—å–∏–º—Ä–∞–Ω": 3,
    "–∞–Ω–Ω–∏—Å–∞": 4, "–∞–ª—å–∞–Ω–Ω–∏—Å–∞": 4,
    "–º–∞–∏–¥–∞": 5, "–∞–ª—å–º–∞–∏–¥–∞": 5,
    "–∞–Ω–∞–º": 6, "–∞–ª—å–∞–Ω–∞–º": 6,
    "–∞—Ä–∞—Ñ": 7, "–∞–ª—å–∞—Ä–∞—Ñ": 7,
    "–∞–Ω—Ñ–∞–ª": 8, "–∞–ª—å–∞–Ω—Ñ–∞–ª": 8,
    "–∞—Ç—Ç–∞—É–∞–±–∞": 9, "–∞—Ç—Ç–∞—É–±–∞": 9, "–∞—Ç—Ç–∞–≤–±–∞": 9, "–∞–ª—å–∞—Ç—Ç–∞—É–∞–±–∞": 9,
    "—é–Ω—É—Å": 10, "—é–Ω—Éc": 10,
    "—Ö—É–¥": 11, "–∞–ª—å—Ö—É–¥": 11,
    "—é—Å—É—Ñ": 12, "–∞–ª—å—é—Å—É—Ñ": 12,
    "–∞—Ä—Ä–∞–¥": 13, "–∞–ª—å–∞—Ä—Ä–∞–¥": 13,
    "–∏–±—Ä–∞—Ö–∏–º": 14, "–∞–ª—å–∏–±—Ä–∞—Ö–∏–º": 14,
    "—Ö–∏–¥–∂—Ä": 15, "–∞–ª—å—Ö–∏–¥–∂—Ä": 15,
    "–∞–Ω–Ω–∞—Ö–ª—å": 16, "–Ω–∞—Ö–ª—å": 16,
    "–∏—Å—Ä–∞": 17, "–∞–ª—å–∏—Å—Ä–∞": 17,
    "–∫–∞—Ö—Ñ": 18, "–∞–ª—å–∫–∞—Ö—Ñ": 18,
    "–º–∞—Ä–∏—è–º": 19, "–∞–ª—å–º–∞—Ä–∏—è–º": 19,
    "–¢–∞ –•–∞": 20, "—Ç–∞—Ö–∞": 20,
    "–∞–Ω–±–∏–π–∞": 21, "–∞–ª—å–∞–Ω–±–∏–π–∞": 21,
    "—Ö–∞–¥–∂": 22, "–∞–ª—å—Ö–∞–¥–∂": 22,
    "–º—É–º–∏–Ω—É–Ω": 23, "–∞–ª—å–º—É–º–∏–Ω—É–Ω": 23,
    "–Ω—É—Ä": 24, "–∞–Ω–Ω—É—Ä": 24,
    "—Ñ—É—Ä–∫–∞–Ω": 25, "–∞–ª—å—Ñ—É—Ä–∫–∞–Ω": 25,
    "—à—É–∞—Ä–∞": 26, "–∞–ª—å—à—É–∞—Ä–∞": 26,
    "–∞–Ω–∞–º–ª": 27, "–∞–ª—å–∞–Ω–∞–º–ª": 27,
    "–∫–∞—Å–∞—Å": 28, "–∞–ª—å–∫–∞—Å–∞—Å": 28,
    "–∞–Ω–∫–∞–±—É—Ç": 29, "–∞–ª—å–∞–Ω–∫–∞–±—É—Ç": 29,
    "—Ä—É–º": 30, "–∞–ª—å—Ä—É–º": 30,
    "–ª—É–∫–º–∞–Ω": 31, "–∞–ª—å–ª—É–∫–º–∞–Ω": 31,
    "—Å–∞–¥–∂–¥–∞—Ö": 32, "–∞–ª—å—Å–∞–¥–∂–¥–∞—Ö": 32,
    "–∞—Ö–∑–∞–±": 33, "–∞–ª—å–∞—Ö–∑–∞–±": 33,
    "—Å–∞–±–∞": 34, "–∞–ª—å—Å–∞–±–∞": 34,
    "—Ñ–∞–¥–∂—Ä": 35, "—è—Å–∏–Ω": 36, "–∞—Å—Å–∞—Ñ—Ñ–∞—Ç": 37,
    "—Å–∞–¥–∂–¥–∞": 38, "–∞–∑–∑—É–º–∞—Ä": 39,
    "–≥–∞—Ñ–∏—Ä": 40, "—Ñ—É—Å—Å–∏–ª–∞—Ç": 41,
    "–∞—à—à—É—Ä–∞": 42, "–∞–∑–∑—É—Ö—Ä—É—Ñ": 43,
    "–∞–¥–¥—É—Ö–∞–Ω": 44, "–∞–ª—å–¥–∂–∞—Ç–∏—è": 45,
    "–∞–ª–∞—Ö–∫–∞—Ñ": 46, "–º—É—Ö–∞–º–º–∞–¥": 47,
    "–∞–ª—å—Ñ–∞—Ç—Ö": 48, "–∞–ª—å—Ö—É–¥–∂—É—Ä–∞—Ç": 49,
    "–≥–∞—Ñ": 50, "–∞–∑–∑–∞—Ä–∏—è—Ç": 51,
    "–∞—Ç—Ç—É—Ä": 52, "–∞–Ω–Ω–∞–¥–∂–º": 53,
    "–∞–ª—å–∫–∞–º–∞—Ä": 54, "–∞—Ä—Ä–∞—Ö–º–∞–Ω": 55,
    "–∞–ª—å–≤–∞–∫–∏—è": 56, "–∞–ª—å—Ö–∞–¥–∏–¥": 57,
    "–∞–ª—å–º—É–¥–∂–∞–¥–∏–ª—è": 58, "–∞–ª—å—Ö–∞—à—Ä": 59,
    "–∞–ª—å–º—É—Ç–∞—Ö–∞–Ω–∞": 60,
    "–∞—Å—Å–∞—Ñ—Ñ": 61, "–∞–ª—å–¥–∂—É–º—É–∞": 62,
    "–∞–ª—å–º—É–Ω–∞—Ñ–∏–∫—É–Ω": 63, "–∞—Ç—Ç–∞–≥–∞–±—É–Ω": 64,
    "–∞—Ç—Ç–∞–ª—è–∫": 65,
    "–∞—Ç—Ç–∞—Ö—Ä–∏–º": 66, "–∞–ª—å–º—É–ª–∫": 67,
    "–∞–ª—å–∫–∞–ª–∞–º": 68, "–∞–ª—å—Ö–∞–∫–∫–∞": 69,
    "–∞–ª—å–º–∞–∞—Ä–∏–¥–∂": 70, "–Ω—É—Ö": 71,
    "–∞–ª—å–¥–∂–∏–Ω–Ω": 72, "–∞–ª—å–º—É–∑–∑–∞–ª–ª–∏–º": 73,
    "–∞–ª—å–º—É–¥–¥–∞—Å–∏—Ä": 74, "–∞–ª—å–∫–∏—è–º–∞": 75,
    "–∞–ª—å–º—É—Ä—Å–∞–ª—è—Ç": 77, "–∞–Ω–Ω–∞–±–∞": 78,
    "–∞–Ω–Ω–∞–∑–∏–∞—Ç": 79, "–∞–±–∞—Å—Å–∞": 80,
    "–∞—Ç—Ç–∞–∫–≤–∏—Ä": 81, "–∞–ª—å–∏–Ω—Ñ–∏—Ç–∞—Ä": 82,
    "–∞–ª—å–º—É—Ç–∞—Ñ—Ñ–∏–≤–∏–Ω": 83, "–∞–ª—å–∏–Ω—à–∏–∫–∞–∫": 84,
    "–∞–ª—å–±—É—Ä—É–¥–∂": 85, "–∞—Ç—Ç–∞—Ä–∏–∫": 86,
    "–∞–ª—å–∞–ª–∞": 87, "–∞–ª—å–≥–∞—à–∏—è": 88,
    "–∞–ª—å—Ñ–∞–¥–∂—Ä": 89, "–∞–ª—å–±–∞–ª—è–¥": 90,
    "–∞—à—à–∞–º—Å": 91, "–∞–ª—å–ª—è–π–ª—å": 92,
    "–∞–¥–¥—É—Ö–∞": 93, "–∞—à—à–∞—Ä—Ö": 94,
    "–∞—Ç—Ç–∏–Ω": 95, "–∞–ª—å–∞–ª—è–∫": 96,
    "–∞–ª—å–∫–∞–¥—Ä": 97, "–∞–ª—å–±–∞–π–π–∏–Ω–∞": 98,
    "–∞–∑–∑–∞–ª—å–∑–∞–ª—è": 99, "–∞–ª—å–∞–¥–∏—è—Ç": 100,
    "–∞–ª—å–∫–∞—Ä–∏–∞": 101, "–∞—Ç—Ç–∞–∫–∞—Å—É—Ä": 102,
    "–∞–ª—å–∞—Å—Ä": 103, "–∞–ª—å—Ö—É–º–∞–∑–∞": 104,
    "–∞–ª—å—Ñ–∏–ª—å": 105, "–∫—É—Ä–∞–π—à": 106,
    "–∞–ª—å–º–∞—É–Ω": 107, "–∞–ª—å–∫–∞–≤—Å–∞—Ä": 108,
    "–∞–ª—å–∫–∞—Ñ–∏—Ä—É–Ω": 109,
    "–∞–Ω–Ω–∞—Å—Ä": 110, "–∞–ª—å–º–∞—Å–∞–¥": 111,
    "–∞–ª—å–∏—Ö–ª—è—Å": 112, "–∞–ª—å—Ñ–∞–ª—è–∫": 113,
    "–∞–Ω–Ω–∞—Å": 114
}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—Ä ===
async def get_surahs():
    try:
        response = requests.get(f"{API_BASE}/surah")
        return response.json()["data"]
    except:
        return []


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—è—Ç–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ ===
async def get_surah_ayahs(surah_number):
    try:
        ar_resp = requests.get(f"{API_BASE}/surah/{surah_number}/ar.alafasy").json()
        tr_resp = requests.get(f"{API_BASE}/surah/{surah_number}/{LANGUAGE_CODE}").json()
        return ar_resp["data"]["ayahs"], tr_resp["data"]["ayahs"]
    except:
        return [], []


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞—è—Ç–∞ ===
async def get_ayah(surah, ayah):
    try:
        resp = requests.get(f"{API_BASE}/ayah/{surah}:{ayah}/ar.alafasy").json()
        if resp.get("status") == "OK":
            return resp["data"]
        else:
            return None
    except:
        return None


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—è—Ç–æ–≤ ===
async def handle_text_ayah_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()

    # –§–æ—Ä–º–∞—Ç: 10:3 –∏–ª–∏ 10-3
    colon_match = re.match(r"(\d{1,3})[:\-](\d+)", text)

    if colon_match:
        surah_num = int(colon_match.group(1))
        ayah_num = int(colon_match.group(2))

        _, tr_ayahs = await get_surah_ayahs(surah_num)
        total_ayahs = len(tr_ayahs)

        if ayah_num <= 0 or ayah_num > total_ayahs:
            await update.message.reply_text(f"‚ùå –í —Å—É—Ä–µ {surah_num} –Ω–µ—Ç –∞—è—Ç–∞ {ayah_num}.")
            return

        ayah_data = await get_ayah(surah_num, ayah_num)
        if not ayah_data or not isinstance(ayah_data, dict):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—è—Ç–∞.")
            return

        translation = tr_ayahs[ayah_num - 1]['text'] if ayah_num <= total_ayahs else ""

        await update.message.reply_text(
            f"üìñ *–°—É—Ä–∞ {surah_num}, –ê—è—Ç {ayah_num}*\n\n"
            f"üóå {ayah_data['text']}\n\n"
            f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{translation}_",
            parse_mode=ParseMode.MARKDOWN
        )
        await update.message.reply_audio(
            audio=ayah_data["audio"],
            title=f"–°—É—Ä–∞ {surah_num}, –ê—è—Ç {ayah_num}"
        )
        return

    # –§–æ—Ä–º–∞—Ç: –°—É—Ä–∞ –ê–ª—å-–ë–∞–∫–∞—Ä–∞ –∞—è—Ç 8
    match = re.search(r"—Å—É—Ä–∞ ([–∞-—è—ëa-z\- ]+) –∞—è—Ç (\d+)", text)
    if match:
        sura_name = match.group(1).strip().replace("–∞–ª—å", "").replace(" ", "")
        ayah_num = int(match.group(2))

        surah_num = RUSSIAN_SURA_NAMES.get(sura_name)
        if not surah_num:
            await update.message.reply_text("‚ùå –°—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–µ–µ.")
            return

        _, tr_ayahs = await get_surah_ayahs(surah_num)

        if ayah_num <= 0 or ayah_num > len(tr_ayahs):
            await update.message.reply_text(
                f"‚ùå –í —Å—É—Ä–µ ‚Ññ{surah_num} –Ω–µ—Ç –∞—è—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {ayah_num}."
            )
            return

        ayah_data = await get_ayah(surah_num, ayah_num)
        if not ayah_data:
            await update.message.reply_text("‚ùå –ê—è—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        translation = tr_ayahs[ayah_num - 1]['text']

        await update.message.reply_text(
            f"üìñ *–°—É—Ä–∞ {surah_num}, –ê—è—Ç {ayah_num}*\n\n"
            f"üóå {ayah_data['text']}\n\n"
            f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{translation}_",
            parse_mode=ParseMode.MARKDOWN
        )
        await update.message.reply_audio(
            audio=ayah_data["audio"],
            title=f"–°—É—Ä–∞ {surah_num}, –ê—è—Ç {ayah_num}"
        )
        return

    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `2:255`", parse_mode=ParseMode.MARKDOWN)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üïå *–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º!*\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Quran Audio Bot*! üìñ‚ú®\n\n"
        "üéØ *–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*\n"
        "‚Ä¢ üéß –°–ª—É—à–∞–π –∞—è—Ç—ã –ö–æ—Ä–∞–Ω–∞\n"
        "‚Ä¢ üìö –ß–∏—Ç–∞–π –ø–µ—Ä–µ–≤–æ–¥—ã\n"
        "‚Ä¢ üîç –ò—â–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –Ω–æ–º–µ—Ä–∞–º\n\n"
        "üß† *–ö–∞–∫ –∏—Å–∫–∞—Ç—å –∞—è—Ç:*\n"
        "–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `2:255`\n"
        "–ò –ø–æ–ª—É—á–∏—à—å –Ω—É–∂–Ω—ã–π –∞—è—Ç, –ø–µ—Ä–µ–≤–æ–¥ –∏ –∞—É–¥–∏–æ! üéß\n\n"
        "üöÄ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:*"
    )

    keyboard = [
        [InlineKeyboardButton("üìñ –í—ã–±—Ä–∞—Ç—å —Å—É—Ä—É", callback_data="show_surahs_0")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def show_main_menu(query):
    welcome_text = (
        "üïå *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
    )

    keyboard = [
        [InlineKeyboardButton("üìñ –í—ã–±—Ä–∞—Ç—å —Å—É—Ä—É", callback_data="show_surahs_0")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    await query.edit_message_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –ö–æ–º–∞–Ω–¥–∞ /menu ===
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üïå *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
    )

    keyboard = [
        [InlineKeyboardButton("üìñ –í—ã–±—Ä–∞—Ç—å —Å—É—Ä—É", callback_data="show_surahs_0")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –ö–æ–º–∞–Ω–¥–∞ /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n"
        "üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /search [—Å–ª–æ–≤–æ] - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞—è—Ç\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥\n"
        "4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
        "üîç *–ü–æ–∏—Å–∫:*\n"
        "–í–≤–µ–¥–∏—Ç–µ /search –∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "–ü—Ä–∏–º–µ—Ä: /search –ê–ª—å –§–∞—Ç–∏—Ö–∞\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await update.message.reply_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –ü–æ–º–æ—â—å –ø–æ –ø–æ–∏—Å–∫—É ===
async def show_search_help(query):
    help_text = (
        "üîç *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫:*\n\n"
        "üìù *–°–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /search [—Å–ª–æ–≤–æ]\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä: /search –ê–ª—å –§–∞—Ç–∏—Ö–∞\n"
        "‚ö° *–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:*\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞"
    )

    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –í—ã–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Å—É—Ä–∞–º–∏ ===
async def show_surah_page(query, page):
    surahs = await get_surahs()
    if not surahs:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    page_size = 15
    start_idx = page * page_size
    end_idx = start_idx + page_size

    text = f"üìö *–°–ø–∏—Å–æ–∫ —Å—É—Ä –ö–æ—Ä–∞–Ω–∞* (—Å—Ç—Ä. {page + 1})\n\n"
    keyboard = []

    for s in surahs[start_idx:end_idx]:
        btn_text = f"üìñ {s['number']}. {s['englishName']}"
        if len(btn_text) > 30:
            btn_text = btn_text[:27] + "..."

        btn = InlineKeyboardButton(btn_text, callback_data=f"surah_{s['number']}")
        keyboard.append([btn])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_surahs_{page - 1}"))
    if end_idx < len(surahs):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"show_surahs_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –ü–æ–∫–∞–∑ –∞—è—Ç–æ–≤ —Å—É—Ä—ã ===
async def show_surah_ayahs(query, surah_num, page=0):
    ar_ayahs, tr_ayahs = await get_surah_ayahs(surah_num)

    if not ar_ayahs:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—è—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    surahs = await get_surahs()
    surah_name = next((s['englishName'] for s in surahs if s['number'] == surah_num), f"–°—É—Ä–∞ {surah_num}")

    page_size = 15
    start_idx = page * page_size
    end_idx = start_idx + page_size

    text = f"üìñ *{surah_name}*\n"
    text += f"üìä –í—Å–µ–≥–æ –∞—è—Ç–æ–≤: {len(ar_ayahs)}\n\n"
    text += f"üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –∞—è—Ç:*"

    keyboard = []

    for i, ayah in enumerate(ar_ayahs[start_idx:end_idx], start=start_idx + 1):
        btn_text = f"üîπ –ê—è—Ç {i}"
        btn = InlineKeyboardButton(btn_text, callback_data=f"ayah_{surah_num}_{i}")
        keyboard.append([btn])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞—è—Ç–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"surah_page_{surah_num}_{page - 1}"))
    if end_idx < len(ar_ayahs):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"surah_page_{surah_num}_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([
        InlineKeyboardButton("üìö –ö —Å—É—Ä–∞–º", callback_data="show_surahs_0"),
        InlineKeyboardButton("üìù –ß–∏—Ç–∞—Ç—å –≤—Å—é —Å—É—Ä—É", callback_data=f"surah_full_{surah_num}_0"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


# === –ü–æ–∫–∞–∑ –∞—è—Ç–∞ ===
async def show_ayah(query, surah_num, ayah_num):
    ayah_data = await get_ayah(surah_num, ayah_num)

    if not ayah_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—è—Ç–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    _, tr_ayahs = await get_surah_ayahs(surah_num)
    translation = ""
    if tr_ayahs and len(tr_ayahs) >= ayah_num:
        translation = tr_ayahs[ayah_num - 1]["text"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—Ä–µ
    surahs = await get_surahs()
    surah_name = next((s['englishName'] for s in surahs if s['number'] == surah_num), f"–°—É—Ä–∞ {surah_num}")

    text = f"üìñ *{surah_name}*\n"
    text += f"üîπ *–ê—è—Ç {ayah_num}*\n\n"
    text += f"üìù *–ü–µ—Ä–µ–≤–æ–¥:*\n_{translation}_\n\n"
    text += f"üéß *–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...*"

    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –∞—è—Ç–∞–º —Å—É—Ä—ã", callback_data=f"surah_{surah_num}")],
        [InlineKeyboardButton("üìö –ö —Å—É—Ä–∞–º", callback_data="show_surahs_0")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    try:
        await query.message.reply_audio(
            audio=ayah_data["audio"],
            title=f"–ê—è—Ç {ayah_num} - {surah_name}",
            caption=f"üéß *–ê—è—Ç {ayah_num}* –∏–∑ —Å—É—Ä—ã *{surah_name}*",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
    await query.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤—Å–µ–π —Å—É—Ä—ã
    bitrate = 128
    edition = "ar.alafasy"
    surah_str = str(surah_num)
    audio_url = f"https://cdn.islamic.network/quran/audio-surah/{bitrate}/{edition}/{surah_str}.mp3"

    try:
        await query.message.reply_audio(
            audio=audio_url,
            title=f"–°—É—Ä–∞ {surah_name}",
            caption=f"üéß –ê—É–¥–∏–æ –ø–æ–ª–Ω–æ–π —Å—É—Ä—ã *{surah_name}*",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ–ª–Ω–æ–π —Å—É—Ä—ã: {e}")


# === –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π —Å—É—Ä—ã ===
async def show_full_surah_page(query, surah_num, page):
    ar_ayahs, tr_ayahs = await get_surah_ayahs(surah_num)
    if not ar_ayahs or not tr_ayahs:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    page_size = 5
    start = page * page_size
    end = start + page_size

    surahs = await get_surahs()
    surah_name = next((s['englishName'] for s in surahs if s['number'] == surah_num), f"–°—É—Ä–∞ {surah_num}")

    text = f"üìñ *{surah_name}* ‚Äî –∞—è—Ç—ã {start + 1}‚Äì{min(end, len(ar_ayahs))}\n\n"

    for i in range(start, min(end, len(ar_ayahs))):
        ar = ar_ayahs[i]
        tr = tr_ayahs[i]
        text += f"*–ê—è—Ç {ar['numberInSurah']}*\n"
        text += f"{ar['text']}\n"
        text += f"_{tr['text']}_\n\n"

    keyboard = []

    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"surah_full_{surah_num}_{page - 1}"))
    if end < len(ar_ayahs):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"surah_full_{surah_num}_{page + 1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—è—Ç–∞–º", callback_data=f"surah_{surah_num}")
    ])
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

    if page == 0:
        bitrate = 128
        edition = "ar.alafasy"
        audio_url = f"https://cdn.islamic.network/quran/audio-surah/{bitrate}/{edition}/{surah_num}.mp3"

        try:
            await query.message.reply_audio(
                audio=audio_url,
                title=f"–°—É—Ä–∞ {surah_name}",
                caption=f"üéß –ê—É–¥–∏–æ –ø–æ–ª–Ω–æ–π —Å—É—Ä—ã *{surah_name}*",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏–æ —Å—É—Ä—ã: {e}")


# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===
def normalize(text):
    text = text.lower()
    text = re.sub(r"[—å—ä\-]", "", text)
    text = text.replace("–∞–ª—å", "")
    text = re.sub(r"\s+", "", text)
    return text


# === –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É ===
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    input_text = ' '.join(context.args)
    normalized_input = normalize(input_text)

    # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
    matches = [(name, num) for name, num in RUSSIAN_SURA_NAMES.items() if normalized_input in name]

    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å—É—Ä—ã
    unique_matches = {}
    for name, num in matches:
        if num not in unique_matches:
            unique_matches[num] = name

    if unique_matches:
        text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unique_matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è \"{input_text}\":\n\n"
        keyboard = []
        for num, name in list(unique_matches.items())[:10]:
            official_name = SURA_OFFICIAL_NAMES.get(num, name.title())
            text += f"‚Ä¢ {official_name}\n"
            keyboard.append([InlineKeyboardButton(official_name, callback_data=f"surah_{num}")])

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    close_matches = get_close_matches(normalized_input, RUSSIAN_SURA_NAMES.keys(), n=5, cutoff=0.5)

    if close_matches:
        text = f"üîç –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n\n"
        keyboard = []
        shown = set()
        for name in close_matches:
            num = RUSSIAN_SURA_NAMES[name]
            if num in shown:
                continue
            shown.add(num)
            official_name = SURA_OFFICIAL_NAMES.get(num, name.title())
            text += f"‚Ä¢ {official_name}\n"
            keyboard.append([InlineKeyboardButton(official_name, callback_data=f"surah_{num}")])

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{input_text}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –ø–æ—Ö–æ–∂–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç.",
            parse_mode=ParseMode.MARKDOWN
        )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        if data == "main_menu":
            await show_main_menu(query)

        elif data == "help":
            help_text = (
                "üìã *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n"
                "üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "‚Ä¢ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /search [—Å–ª–æ–≤–æ] - –ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É\n\n"
                "üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
                "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞—è—Ç\n"
                "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥\n"
                "4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
                "üîç *–ü–æ–∏—Å–∫:*\n"
                "–í–≤–µ–¥–∏—Ç–µ /search –∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
                "–ü—Ä–∏–º–µ—Ä: /search –º–∏–ª–æ—Å—Ç—å\n\n"
                "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
            )

            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]

            await query.edit_message_text(
                help_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )

        elif data == "search_help":
            await show_search_help(query)

        elif data == "start_search":
            await query.edit_message_text(
                "üîç *–ü–æ–∏—Å–∫ –ø–æ –ö–æ—Ä–∞–Ω—É*\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                "`/search [–≤–∞—à–µ —Å–ª–æ–≤–æ]`\n\n"
                "üí° *–ü—Ä–∏–º–µ—Ä:* /search –º–∏–ª–æ—Å—Ç—å",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )

        elif data.startswith("show_surahs_"):
            page = int(data.split("_")[2])
            await show_surah_page(query, page)

        elif data.startswith("surah_page_"):
            parts = data.split("_")
            surah_num = int(parts[2])
            page = int(parts[3])
            await show_surah_ayahs(query, surah_num, page)

        elif data.startswith("surah_full_"):
            parts = data.split("_")
            surah_num = int(parts[2])
            page = int(parts[3])
            await show_full_surah_page(query, surah_num, page)

        elif data.startswith("surah_"):
            surah_num = int(data.split("_")[1])
            await show_surah_ayahs(query, surah_num)

        elif data.startswith("ayah_"):
            parts = data.split("_")
            surah_num = int(parts[1])
            ayah_num = int(parts[2])
            await show_ayah(query, surah_num, ayah_num)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )


class HealthHandler(tornado.web.RequestHandler):
    def get(self):
        self.write({"status": "ok", "message": "Bot is alive"})


class PingHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("pong")


class WebhookHandler(tornado.web.RequestHandler):
    def initialize(self, telegram_app):
        self.telegram_app = telegram_app

    async def post(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        try:
            import json
            from telegram import Update

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            update_data = json.loads(self.request.body.decode())
            update = Update.de_json(update_data, self.telegram_app.bot)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self.telegram_app.process_update(update)

            self.write({"status": "ok"})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            self.write({"status": "error", "message": str(e)})


def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –ö–æ—Ä–∞–Ω–∞.')


def echo(update, context):
    """–≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


def main(TOKEN='8072816097:AAGhI2SLAHbmKpVPhIOHvaIrKT0RiJ5f1So'):
    app = Application.builder().token(TOKEN).build()
    TOKEN = "8072816097:AAGhI2SLAHbmKpVPhIOHvaIrKT0RiJ5f1So"
    PORT = int(os.environ.get('PORT', 8443))

    # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    telegram_app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # telegram_app.add_handler(CommandHandler("start", start))
    # telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_ayah_request))

    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web_app = tornado.web.Application([
        (r"/health", HealthHandler),
        (r"/ping", PingHandler),
        (r"/", PingHandler),
        (rf"/{TOKEN}", WebhookHandler, {"telegram_app": telegram_app}),
    ])

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    web_app.listen(PORT)
    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"Webhook URL: https://tgbotquranaudio.onrender.com/{TOKEN}")

    # –ó–∞–ø—É—Å–∫ event loop
    tornado.ioloop.IOLoop.current().start()


if __name__ == '__main__':
    main()